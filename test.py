#TEST FUNCTIONS

"""
This test function is to check if the given file is RTF or not and is mapped to the function 'is_rtf_file'
Test Scenario : 

- Test case id : KEX002.2_TC00.0

- Test case description : Verify that the file name contains a '.rtf' extension. If not, write test cases for other file types

- Test case step : 
1. Check for a folder directory in the system
2. Check for .rtf extension 
3. Generate test functions for the test cases
4. Generate test functions for other file types 

"""

# Function to check if a file is an RTF file

def is_rtf_file(file_path):
    return os.path.splitext(file_path)[1].lower() == '.rtf'


# Test cases for the function
def test_is_rtf_file():
    # Test case 1: File with .rtf extension
    assert is_rtf_file("example.rtf") == True

    # Test case 2: File with .txt extension
    assert is_rtf_file("example.txt") == False

    # Test case 3: File with uppercase .RTF extension
    assert is_rtf_file("example.RTF") == True

    # Test case 4: File with no extension
    assert is_rtf_file("example") == False


# Main block to execute the function
if __name__ == "__main__":
    if not selected_folder_path:
        print("No folder selected. Please select a folder using the UI.")
        return
    
    for file_name in os.listdir(selected_folder_path):
        file_path = os.path.join(selected_folder_path, file_name)
        # Check if the path is a file and has an .rtf extension
        if os.path.isfile(file_path) and is_rtf_file(file_path):
            print(f"{file_path} is an RTF file.")
        else:
            print(f"{file_path} is not an RTF file.")


#test function to check for RTF Schema
"""
This test function is to check if for the RTF schema and is mapped to the function 'check_rtf'

Test Scenario : 
- Test case id : KEX002.2_TC00.1

- Test case description : Verify that the RTF File conforms to the RTF Schema with the corresponding RTF control tags

- Test case step : 
1. Check for a folder directory in the system
2. Open the RTF file after checking the folder 
3. Check whether the RTF file conforms to schema
4. Generate test function for checking RTF File

"""
def test_check_rtf():
    if not selected_folder_path:
        print("No folder selected. Please select a folder using the UI.")
        return
    for file_name in os.listdir(selected_folder_path):
        file_path = os.path.join(selected_folder_path, file_name)
        if os.path.isfile(file_path) and file_path.lower().endswith('.rtf'):
            try:
                expected_output = "RTF conforms to schema"
                actual_output = check_rtf(file_path)
                assert actual_output == expected_output, f"AssertionError: {file_path} does not adhere to schema"
            except AssertionError as e:
                print(e)
            except Exception as e:
                print(f"Error processing file {file_path}: {e}")



# Test function to extract header
"""
"This test function is to verify the presence of a header in an RTF file and is mapped with the 'extract_header' function."

Test Scenario:
- test case id : KEX002.2_TC001

- test case description : Verify that the system extracts all header components from the RTF table generated by SAS/R software.

- test step:
1. Upload the sample RTF file containing the table to the system.
2. Initiate the extraction process.
3. Open the generated JSON file.
4. Verify that all header components from the RTF table are present in the JSON output.
"""
def test_extract_header():
    if not selected_folder_path:
        print("No folder selected. Please select a folder using the UI.")
        return
    
    for file_name in os.listdir(selected_folder_path):
        file_path = os.path.join(selected_folder_path, file_name)
        if os.path.isfile(file_path) and file_path.lower().endswith('.rtf'):
            try:
                with open(file_path, 'r') as file:
                    rtf_content = file.read()
                    expected_output = "Header extracted successfully"
                    actual_output = extract_header(rtf_content)
                    assert actual_output == expected_output, f"AssertionError: Header Not Found in {file_path}"
            except AssertionError as e:
                print(e)
            except Exception as e:
                print(f"Error processing file {file_path}: {e}")




# Test function to extract title
"""
"This test function is to verify the presence of a title in an RTF file and is mapped with the 'extract_title' function."

- test case id : KEX002.2_TC004

- Test case description: Verify that the system extracts all title components from the RTF table generated by SAS/R software.

- test step:
1.Upload the sample RTF file containing the table to the system.
2. Initiate the extraction process.
3. Open the generated JSON file.
4. Verify that all title components from the RTF table are present in the JSON output.
"""
def test_extract_title():
    if not selected_folder_path:
        print("No folder selected. Please select a folder using the UI.")
        return
    for file_name in os.listdir(selected_folder_path):
        file_path = os.path.join(selected_folder_path, file_name)
        if os.path.isfile(file_path) and file_path.lower().endswith('.rtf'):
            try:
                with open(file_path, 'r') as file:
                    rtf_content = file.read()
                    expected_output = "Title extracted successfully"
                    actual_output = extract_title(rtf_content)
                    assert actual_output == expected_output, f"AssertionError: Title Not Found in {file_path}"
            except Exception as e:
                print(f"Error processing file {file_path}: {e}")


#test functions to extract body components and table data
"""
"These test functions are to verify the presence of body components and table data and is mapped with the functions "extract_column_header and extract_table_data"

- Test case id : KEX002.2_TC005

- Test case description : Verify that the system extracts all body components from the RTF table generated by SAS/R software.

- Test step :
1. Upload the sample RTF file containing the table to the system.
2. Initiate the extraction process.
3. Open the generated JSON file.
4. Verify that all body components from the RTF table are present in the JSON output.
"""

# Test function to extract column headers
def test_extract_column_headers():
    if not selected_folder_path:
        print("No folder selected. Please select a folder using the UI.")
        return
    for file_name in os.listdir(selected_folder_path):
        file_path = os.path.join(selected_folder_path, file_name)
        if os.path.isfile(file_path) and file_path.lower().endswith('.rtf'):
            try:
                with open(file_path, 'r') as file:
                    rtf_content = file.read()
                    expected_output = "Column headers extracted successfully"
                    actual_output = extract_column_headers(rtf_content)
                    assert actual_output == expected_output, f"AssertionError: Column headers not found in {file_path}"
            except AssertionError as e:
                print(e)
            except Exception as e:
                print(f"Error processing file {file_path}: {e}")



# Test function to extract table data
def test_extract_table_data():
    if not selected_folder_path:
        print("No folder selected. Please select a folder using the UI.")
        return
    for file_name in os.listdir(selected_folder_path):
        file_path = os.path.join(selected_folder_path, file_name)
        if os.path.isfile(file_path) and file_path.lower().endswith('.rtf'):
            try:
                with open(file_path, 'r') as file:
                    rtf_content = file.read()
                    expected_output = "Table data extracted successfully"
                    actual_output = extract_table_data(rtf_content)
                    assert actual_output == expected_output, f"AssertionError: Table data not found in {file_path}"
            except AssertionError as e:
                print(e)
            except Exception as e:
                print(f"Error processing file {file_path}: {e}")


"""
"This test function is to verify the presence of footnotes in an RTF file and is mapped with the 'extract_footnotes' function."

- Test case id : KEX002.2_TC002

- Test case description : Verify that the system extracts all footnotes from the RTF table generated by SAS/R software.

- Test step :
"1. Upload the sample RTF file containing the table to the system.
2. Initiate the extraction process.
3. Open the generated JSON file.
4. Verify that all footnotes from the RTF table are present in the JSON output."
"""

#test function to extract footnotes
def test_extract_footnotes():
    if not selected_folder_path:
        print("No folder selected. Please select a folder using the UI.")
        return
    for file_name in os.listdir(selected_folder_path):
        file_path = os.path.join(selected_folder_path, file_name)
        if os.path.isfile(file_path) and file_path.lower().endswith('.rtf'):
            try:
                with open(file_path, 'r') as file:
                    rtf_content = file.read()
                    expected_output = "Footnotes extracted successfully"
                    actual_output = extract_footnotes(rtf_content)
                    assert actual_output == expected_output, f"AssertionError: Footnotes not found in {file_path}"
            except AssertionError as e:
                print(e)
            except Exception as e:
                print(f"Error processing file {file_path}: {e}")  


"""
"This test function is to verify the presence of a footer in an RTF file and is mapped with the 'extract_footer' function."

- Test case id : KEX002.2_TC003

- Test case description : Verify that the system extracts all footer components from the RTF table generated by SAS/R software.

- Test step
1. Upload the sample RTF file containing the table to the system.
2. Initiate the extraction process.
3. Open the generated JSON file.
4. Verify that all footer components from the RTF table are present in the JSON output.
"""

#test function to extract footer
def test_extract_footer():
    if not selected_folder_path:
        print("No folder selected. Please select a folder using the UI.")
        return
    for file_name in os.listdir(selected_folder_path):
        file_path = os.path.join(selected_folder_path, file_name)
        if os.path.isfile(file_path) and file_path.lower().endswith('.rtf'):
            try:
                with open(file_path, 'r') as file:
                    rtf_content = file.read()
                    expected_output = "Footer extracted successfully"
                    actual_output = extract_footer(rtf_content)
                    assert actual_output == expected_output, f"AssertionError: Footer not found in {file_path}"
            except AssertionError as e:
                print(e)
            except Exception as e:
                print(f"Error processing file {file_path}: {e}")



"""
This test function is to verify that the conversion of RTF to JSON is successful.

- Test step 
1. Provide a valid input (e.g., a data structure or content) that needs to be converted into a JSON file.
2. Run the JSON file creation module.
3. Check if a JSON file is generated and verify its content.
"""


# Function to convert an rtf file to json
def test_convert_rtf():
    if not selected_folder_path:
        print("No folder selected. Please select a folder using the UI.")
        return
    for file_name in os.listdir(selected_folder_path):
        file_path = os.path.join(selected_folder_path, file_name)
        if os.path.isfile(file_path) and file_path.lower().endswith('.rtf'):
            try:
                with open(file_path, 'r') as file:
                    rtf_content = file.read()
                    expected_output = "Successful"
                    actual_output = convert_rtf(rtf_content)
                    assert actual_output == expected_output, f"AssertionError: Conversion failed for {file_path}"
            except AssertionError as e:
                print(e)
            except Exception as e:
                print(f"Error processing file {file_path}: {e}")
